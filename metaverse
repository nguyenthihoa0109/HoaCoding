// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract Metaverse {
    struct Asset {
        string name;
        string description;
        address owner;
        uint256 price;
        bool isForRent;
        uint256 rentPrice;
        address renter;
    }

    mapping(uint256 => Asset) public assets;
    uint256 public nextAssetId;
    address public owner;

    modifier onlyOwner() {
        require(msg.sender == owner, "Not the contract owner");
        _;
    }

    modifier onlyAssetOwner(uint256 _assetId) {
        require(assets[_assetId].owner == msg.sender, "Not the asset owner");
        _;
    }

    event AssetCreated(uint256 assetId, string name, string description, uint256 price);
    event AssetTransferred(uint256 assetId, address from, address to);
    event AssetRented(uint256 assetId, address renter, uint256 rentPrice);
    event AssetUpdated(uint256 assetId, string name, string description, uint256 price);
    event AssetDeleted(uint256 assetId);

    constructor() {
        owner = msg.sender;
    }

    function createAsset(string memory _name, string memory _description, uint256 _price) external onlyOwner {
        assets[nextAssetId] = Asset(_name, _description, msg.sender, _price, false, 0, address(0));
        emit AssetCreated(nextAssetId, _name, _description, _price);
        nextAssetId++;
    }

    function transferAsset(uint256 _assetId, address _to) external onlyAssetOwner(_assetId) {
        require(_to != address(0), "Invalid address");
        assets[_assetId].owner = _to;
        emit AssetTransferred(_assetId, msg.sender, _to);
    }

    function setForRent(uint256 _assetId, uint256 _rentPrice) external onlyAssetOwner(_assetId) {
        assets[_assetId].isForRent = true;
        assets[_assetId].rentPrice = _rentPrice;
    }

    function rentAsset(uint256 _assetId) external payable {
        Asset storage asset = assets[_assetId];
        require(asset.isForRent, "Asset not for rent");
        require(msg.value >= asset.rentPrice, "Insufficient funds");

        asset.renter = msg.sender;
        asset.owner.transfer(msg.value);
        emit AssetRented(_assetId, msg.sender, asset.rentPrice);
    }

    function updateAsset(uint256 _assetId, string memory _name, string memory _description, uint256 _price) external onlyAssetOwner(_assetId) {
        Asset storage asset = assets[_assetId];
        asset.name = _name;
        asset.description = _description;
        asset.price = _price;

        emit AssetUpdated(_assetId, _name, _description, _price);
    }

    function deleteAsset(uint256 _assetId) external onlyOwner {
        delete assets[_assetId];
        emit AssetDeleted(_assetId);
    }
}
